Sass : let you to define colors as variable so that it can be reused and easy to modify
Sass vs SCSS : Sass syntax is simple. No curly brace or semicolon.

install Ruby:
"gem install sass" in CMD will install sass and scss for you

"sass -v" will in CMD will show the version of installed sass

Eclipse:
File -> New -> Static web project
New -> HTML File
Run as -> Run on Server

Browser will not understand Sass. It only understand CSS. So need to compile it to CSS so that browser will understand it.
"Sass compiler for Windows" is needed to compile Sass files.

"Chocolatey package manager" can be installed and through that, "choco install sass" will install sass compiler

in CMD, "cd <scss file location>" and then "sass main1.scss main1.css" will create main.css

for Intellij, there is an inbuilt compiler. That will compile scss files

main2:
only want to style the ul items in the nav menu. nothing else (ul inside nav will be applied with this style)

Nesting: ability to write properties inside other properties. It makes easy to style child element.

http://localhost:8080/SCSSFirstExample/index2.html

Grouping style together: 
Eg:
CSS for profile - in one file
CSS for video - in another file

Convention: Name of a file which needs to be included in another file should start with "_".
when importing in another file, get rid of the '_' and the extension.

Same basic styling with different variation: Extend_inheritance
Eg: little-panel extends panel

moz-border-radius: for firebox
ms-border-radius: for internet explorer

Mixins: means this piece of code marked as mixin will be used somewhere else as mixin

Different variations: by operations
Whenever, values are used in operations, we don't need to add pixels, only value is enough
Whenever, a color is multiplied by more than one : brightened the color
if a color is multiplied by less than one : darkened the color

when hover over : can multiply by a value to get lighter color of one color